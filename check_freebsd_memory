#!/usr/bin/perl -w
use strict;

=head1 NAME

check_freebsd_memory - Nagios plugin to report on FreeBSD memory usage

=cut

# The POD text continues at the end of the file.

use strict;

use Data::Dumper;   ### For generating debug output in verbose mode
use Nagios::Plugin; ### For communicating with the nagios server


### Know what we're working with
my %measurements = (
	'processes_in_run_queue' => {
		unit_of_measurement => '',
		parser => sub {
			if($_[0] =~ /Processes\:\s*\(RUNQ: (\d*) Disk Wait\: \d* Page Wait\: \d* Sleep\: \d*\)/) {
				return $1;
			}
		},
	},
	'processes_in_run_queue_on_disk_wait' => {
		unit_of_measurement => '',
		parser => sub {
			if($_[0] =~ /Processes\:\s*\(RUNQ: \d* Disk Wait\: (\d*) Page Wait\: \d* Sleep\: \d*\)/) {
				return $1;
			}
		},
	},
	'processes_in_run_queue_on_page_wait' => {
		unit_of_measurement => '',
		parser => sub {
			if($_[0] =~ /Processes\:\s*\(RUNQ: \d* Disk Wait\: \d* Page Wait\: (\d*) Sleep\: \d*\)/) {
				return $1;
			}
		},
	},
	'processes_in_run_queue_sleeping' => {
		unit_of_measurement => '',
		parser => sub {
			if($_[0] =~ /Processes\:\s*\(RUNQ: \d* Disk Wait\: \d* Page Wait\: \d* Sleep\: (\d*)\)/) {
				return $1;
			}
		},
	},
	'virtual_memory_total' => {
		unit_of_measurement => 'kb',
		parser => sub {
			if($_[0] =~ /Virtual Memory\:\s*\(Total\: (\d*)K, Active \d*K\)/) {
				return $1;
			}
		},
	},
	'virtual_memory_active' => {
		unit_of_measurement => 'kb',
		parser => sub {
			if($_[0] =~ /Virtual Memory\:\s*\(Total\: \d*K, Active (\d*)K\)/) {
				return $1;
			}
		},
	},
	'virtual_memory_usage' => {
		unit_of_measurement => '%',
		parser => sub {
			if($_[0] =~ /Virtual Memory\:\s*\(Total\: (\d*)K, Active (\d*)K\)/) {
				return sprintf('%3.2f',$2 * 100 / $1);
			}
		},
	},
	'real_memory_total' => {
		unit_of_measurement => 'kb',
		parser => sub {
			if($_[0] =~ /Real Memory\:\s*\(Total\: (\d*)K Active \d*K\)/) {
				return $1;
			}
		},
	},
	'composite_real_memory_usage' => {
		unit_of_measurement => '%',
		parser => sub {
			my $free_pages = `/sbin/sysctl -n vm.stats.vm.v_free_count`;
			my $cached_pages = `/sbin/sysctl -n vm.stats.vm.v_cache_count`;
			my $active_pages = `/sbin/sysctl -n vm.stats.vm.v_active_count`;
			chomp $free_pages;
			chomp $cached_pages;
			chomp $active_pages;
			### Not multiplying by page size here - units cancel through division
			my $used_memory = 100 - ($free_pages + $cached_pages) / $active_pages * 100;
			return sprintf('%3.2f',$used_memory);
		},
    },
	'real_memory_active' => {
		unit_of_measurement => 'kb',
		parser => sub {
			if($_[0] =~ /Real Memory\:\s*\(Total\: \d*K Active (\d*)K\)/) {
				return $1;
			}
		},
	},
	'real_memory_usage' => {
		unit_of_measurement => '%',
		parser => sub {
			if($_[0] =~ /Real Memory\:\s*\(Total\: (\d*)K Active (\d*)K\)/) {
				return sprintf('%3.2f',$2 * 100 / $1);
			}
		},
	},
	'shared_virtual_memory_total' => {
		unit_of_measurement => 'kb',
		parser => sub {
			if($_[0] =~ /Shared Virtual Memory\:\s*\(Total\: (\d*)K Active\: \d*K\)/) {
				return $1;
			}
		},
	},
	'shared_virtual_memory_active' => {
		unit_of_measurement => 'kb',
		parser => sub {
			if($_[0] =~ /Shared Virtual Memory\:\s*\(Total\: \d*K Active\: (\d*)K\)/) {
				return $1;
			}
		},
	},
	'shared_virtual_memory_usage' => {
		unit_of_measurement => '%',
		parser => sub {
			if($_[0] =~ /Shared Virtual Memory\:\s*\(Total\: (\d*)K Active\: (\d*)K\)/) {
				return sprintf('%3.2f',$2 * 100 / $1);
			}
		},
	},
	'shared_real_memory_total' => {
		unit_of_measurement => 'kb',
		parser => sub {
			if($_[0] =~ /Shared Real Memory\:\s*\(Total\: (\d*)K Active\: \d*K\)/) {
				return $1;
			}
		},
	},
	'shared_real_memory_active' => {
		unit_of_measurement => 'kb',
		parser => sub {
			if($_[0] =~ /Shared Real Memory\:\s*\(Total\: \d*K Active\: (\d*)K\)/) {
				return $1;
			}
		},
	},
	'shared_real_memory_usage' => {
		unit_of_measurement => '%',
		parser => sub {
			if($_[0] =~ /Shared Real Memory\:\s*\(Total\: (\d*)K Active\: (\d*)K\)/) {
				return sprintf('%3.2f',$2 * 100 / $1);
			}
		},
	},
	'free_memory' => {
		unit_of_measurement => 'kb',
		parser => sub {
			if($_[0] =~ /Free Memory Pages\:\s*(\d*)K/) {
				return $1;
			}
		},
	},
);
my $available_measurements = join("\n",sort(keys(%measurements)));


### Initialize the plugin
my $plugin = Nagios::Plugin->new( 
	shortname => "FREEBSD",
    usage => "Usage: check_freebsd_memory [-m measurement] "
    	    ."-w <warning_threshold> -c <critical_threshold> [--help] "
			."[-v] -[t timeout]",
	version => '0.1.0',
	url     => 'http://danne.stayskal.com/software/check_freebsd',
	license => 'This nagios plugin is free software, and comes with '
			  ."ABSOLUTELY NO WARRANTY.\nIt may be used, redistributed "
			  ."and/or modified under the terms of the \nGNU General "
			  .'Public Licence. See LICENSE.txt for more information.',
	plugin  => 'check_freebsd_memory',
	extra	=> "\n".scalar(keys(%measurements)). " available measurements.\n"
			  ."For full list of measurements, run $0 --measurement list",
);


### Add arguments for warning, critical, and measurement
$plugin->add_arg(
	spec => 'warning|w=s',
	help => "-w, --warning=INTEGER\n   Threshold at which this measurement "
		   .'should generate a WARNING condiiton'
);
$plugin->add_arg(
	spec => 'critical|c=s',
	help => "-c, --critical=INTEGER\n   Threshold at which this measurement "
		   .'should generate a CRITICAL condiiton'
);
$plugin->add_arg(
	spec => 'measurement|m=s',
	help => "-m --measurement=STRING\n   Determines which measurement to extract.",
	required => 1,
);


### Parse command line options
$plugin->getopts;
$plugin->set_thresholds(
	warning => $plugin->opts->warning,
	critical => $plugin->opts->critical,
);
print 'Dump of $plugin: ' . Dumper($plugin) if $plugin->opts()->verbose >= 3;


### Just dump the measurement list if that's all they're asking for
if($plugin->opts->measurement eq 'list'){
	print scalar(keys(%measurements)). " available measurements:\n$available_measurements\n";
	$plugin->nagios_exit( UNKNOWN, 'Listing measurements and exiting');
}


### Make sure the measurement they gave is a valid one
unless($measurements{$plugin->opts->measurement}) {
	my $status_message = 'Invalid measurement: '.$plugin->opts->measurement;
	print "$status_message\nAvailable measurements: $available_measurements\n"
		if $plugin->opts->verbose >= 1;
	$plugin->nagios_exit( UNKNOWN, $status_message);
}


### Set timeout clock
alarm($plugin->opts()->timeout);
local $SIG{ALRM} = sub { 
	$plugin->nagios_exit( UNKNOWN, "Host timed out" );
};


### Make sure we can get to sysctl(8)
unless( -e '/sbin/sysctl'){
	$plugin->nagios_exit( UNKNOWN, "No sysctl in /sbin/");
}
unless( -f '/sbin/sysctl'){
	my $error_message = 'Sysctl at /sbin/sysctl not a plain file.';
	print "$error_message\nMake sure sysctl isn't a directory, symbolic link, named pipe, or block file\n"
		if $plugin->opts->verbose >=1;
	$plugin->nagios_exit( UNKNOWN, $error_message);
}
unless( -x '/sbin/sysctl'){
	$plugin->nagios_exit( UNKNOWN, '/sbin/sysctl is not executable');
}


### Pull and parse sysctl(8)
my $sysctl = `/sbin/sysctl -n vm.vmtotal`||
	$plugin->nagios_exit( UNKNOWN, "/sbin/sysctl -n vm.vmtotal returned status $?");
print "sysctl response:\n$sysctl\n\n" if $plugin->opts->verbose >= 3;


### Stop here unless sysctl(8) gave us something
unless($sysctl){
	my $response = "No usable data in sysctl(8) response";
	print "$response:\n$sysctl\n\n" 
		if $plugin->opts->verbose >= 2;
	$plugin->nagios_exit(UNKNOWN, $response);
}


### Parse count
my $value = $measurements{$plugin->opts->measurement}->{parser}->($sysctl);
my $status_message = $value . $measurements{$plugin->opts->measurement}->{unit_of_measurement} 
					 . ' ' . $plugin->opts->measurement;


### Prepare Performance Data
$plugin->add_perfdata(
	label => $plugin->opts->measurement,
	value => $value,
	uom => $measurements{$plugin->opts->measurement}->{unit_of_measurement},
	threshold => $plugin->threshold
);


### Return the status message
my $status_code = $plugin->check_threshold($value);
$plugin->nagios_exit( $status_code, $status_message ) 
	if $status_code != OK;
$plugin->nagios_exit( UNKNOWN, $status_message )
	if $status_code == OK && !($plugin->opts->warning && $plugin->opts->critical);
$plugin->nagios_exit( OK, $status_message );


=head1 DESCRIPTION

This script acts as a plugin module for the Nagios IT infrastructure monitoring 
system. It on a FreeBSD server to pull for memory information through sysctl(8).
This plugin reports on the following 17 memory measurements:

=over 4

=item * free_memory

=item * processes_in_run_queue

=item * processes_in_run_queue_on_disk_wait

=item * processes_in_run_queue_on_page_wait

=item * processes_in_run_queue_sleeping

=item * real_memory_active

=item * real_memory_total

=item * real_memory_usage

=item * shared_real_memory_active

=item * shared_real_memory_total

=item * shared_real_memory_usage

=item * shared_virtual_memory_active

=item * shared_virtual_memory_total

=item * shared_virtual_memory_usage

=item * virtual_memory_active

=item * virtual_memory_total

=item * virtual_memory_usage

=back

This has been tested with FreeBSD 7.1. 

=head1 SYNOPSIS

=head2 Command Line Interface

Get the percentage of real memory that's currently in use:

	check_freebsd_memory -m real_memory_usage -w 80 -c 90

Get the percentage of virtual memory that's currently in use:

	check_freebsd_memory -m virtual_memory_usage -w 80 -c 90

Run this script with command line options stored in a configuration file:

	check_freebsd_memory --extra-opts=my_config.ini

=head1 SEE ALSO

If using an external configuration file, it should be structured according to 
the specification at <http://nagiosplugins.org/extra-opts/>.

Thresholds given to this script should be in the format specified at 
<http://nagiosplug.sourceforge.net/developer-guidelines.html#THRESHOLDFORMAT>.

This module is built upon L<Nagios::Plugin> by the Nagios Plugin Development
Team.  Further reading on Nagios, NPRE, and Nagios Plugins is available at
<http://nagios.com/>.

=head1 AUTHOR

This script is written and maintained by Danne Stayskal <danne@stayskal.com>
and is available on his website, at
<http://danne.stayskal.com/software/check_frebsd/>.

=head1 LICENSE

Copyright (C) 2009 by Danne Stayskal.

This program is free software; you can redistribute it and/or modify it under 
the terms of the GNU General Public License as published by the Free Software 
Foundation; either version 2 of the License, or (at your option) any later 
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
this program; if not, write to the Free Software Foundation, Inc., 59 Temple 
Place, Suite 330, Boston, MA 02111-1307 USA

Nagios, the Nagios logo, and Nagios graphics are the servicemarks, trademarks, 
or registered trademarks owned by Nagios Enterprises. All other servicemarks 
and trademarks are the property of their respective owner.

=cut
